name: 🧠 Kritis V4.0 - PROD10 Final AI Legal Document Analysis

on:
  workflow_dispatch:
    inputs:
      source_id:
        description: 'Source ID to analyze (UUID format)'
        required: true
        type: string
      pipeline_stage:
        description: 'Pipeline stage to run'
        required: true
        default: 'v40-complete'
        type: choice
        options:
          - 'v40-complete'
          - 'v40-extract'
          - 'v40-analyze'
          - 'v40-synthesize'
          - 'v40-ingest'
          - 'v31-complete'
          - 'validate-environment'

jobs:
  kritis-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📚 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        cd agora-analyst-python
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Configure Environment
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cd agora-analyst-python
        echo "SUPABASE_URL=$SUPABASE_URL" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY" >> .env
        echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" >> .env
        
    - name: ✅ Validate Source ID
      run: |
        python -c "
        import uuid, sys
        try:
            uuid.UUID('${{ github.event.inputs.source_id }}')
            print('✅ Valid UUID format')
        except ValueError:
            print('❌ Invalid UUID format')
            sys.exit(1)
        "
        
    - name: 🧠 Run Kritis V4.0 PROD10 Analysis Pipeline
      run: |
        set -e  # Exit on any error
        cd agora-analyst-python
        
        SOURCE_ID="${{ github.event.inputs.source_id }}"
        PIPELINE_STAGE="${{ github.event.inputs.pipeline_stage }}"
        
        echo "🚀 Starting Kritis V4.0 PROD10 Analysis for Source: $SOURCE_ID"
        echo "📋 Pipeline Stage: $PIPELINE_STAGE"
        
        # Validate environment first
        echo "🔧 Validating production environment..."
        python validate_production.py
        
        if [ "$PIPELINE_STAGE" = "v40-complete" ]; then
          echo "🔄 Running Complete Kritis V4.0 PROD10 Pipeline"
          echo "   - Stage 1: Enhanced Extraction with preamble awareness"
          echo "   - Stage 2: Definitive Analysis with V4.2 prompts"
          echo "   - Stage 3: Final Summary Synthesis with category suggestions"
          echo "   - Stage 4: Definitive Law Ingestion with date intelligence"
          
          python main.py v40-complete --source-id "$SOURCE_ID"
          echo "✅ Complete V4.0 PROD10 pipeline finished successfully!"
          
        elif [ "$PIPELINE_STAGE" = "v31-complete" ]; then
          echo "🔄 Running Complete Kritis V3.1 PROD9 Pipeline"
          python main.py v31-complete --source-id "$SOURCE_ID"
          echo "✅ Complete V3.1 PROD9 pipeline finished successfully!"
          
        elif [ "$PIPELINE_STAGE" = "validate-environment" ]; then
          echo "🔧 Running Environment Validation Only"
          python validate_production.py
          echo "✅ Environment validation completed!"
          
        else
          echo "🔄 Running Single Stage: $PIPELINE_STAGE"
          python main.py "$PIPELINE_STAGE" --source-id "$SOURCE_ID"
          echo "✅ Stage completed successfully!"
        fi
        
    - name: 📊 Generate PROD10 Analysis Report
      if: always()
      run: |
        echo "## 📊 Kritis V4.0 PROD10 Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Source ID**: ${{ github.event.inputs.source_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pipeline Stage**: ${{ github.event.inputs.pipeline_stage }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: Kritis V4.0 Final Definitive (PROD10)" >> $GITHUB_STEP_SUMMARY
        echo "- **Features**: Date Intelligence, V4.2 Prompts, Category Suggestions" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Result**: PROD10 analysis completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Quality**: Enhanced AI persona with structured tag categories" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Innovation**: Intelligent article date extraction and validation" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Result**: Analysis failed - check logs for details" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Troubleshooting**: Verify environment secrets and source ID format" >> $GITHUB_STEP_SUMMARY
        fi