name: 🧠 Kritis 4.0 - AI Legal Document Analysis

on:
  workflow_dispatch:
    inputs:
      source_id:
        description: 'Source ID to analyze (UUID format)'
        required: true
        type: string
      pipeline_stage:
        description: 'Pipeline stage to run'
        required: true
        default: 'full-pipeline'
        type: choice
        options:
          - 'full-pipeline'
          - 'enhanced-extract'
          - 'enhanced-analyze-context'
          - 'intelligent-graph'

jobs:
  kritis-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: 📚 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔧 Configure Environment
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        echo "SUPABASE_URL=$SUPABASE_URL" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY" >> .env
        echo "SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY" >> .env
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" >> .env
        
    - name: ✅ Validate Source ID
      run: |
        python -c "
        import uuid, sys
        try:
            uuid.UUID('${{ github.event.inputs.source_id }}')
            print('✅ Valid UUID format')
        except ValueError:
            print('❌ Invalid UUID format')
            sys.exit(1)
        "
        
    - name: 🧠 Run Kritis 4.0 Analysis Pipeline
      run: |
        set -e  # Exit on any error
        
        SOURCE_ID="${{ github.event.inputs.source_id }}"
        PIPELINE_STAGE="${{ github.event.inputs.pipeline_stage }}"
        
        echo "🚀 Starting Kritis 4.0 Analysis for Source: $SOURCE_ID"
        echo "📋 Pipeline Stage: $PIPELINE_STAGE"
        
        if [ "$PIPELINE_STAGE" = "full-pipeline" ]; then
          echo "🔄 Running Full Kritis 4.0 Pipeline"
          
          echo "📊 Stage 1: Enhanced Metadata Extraction"
          python main.py enhanced-extract --source-id "$SOURCE_ID"
          
          echo "🧠 Stage 2: Enhanced Analysis with Context"
          python main.py enhanced-analyze-context --source-id "$SOURCE_ID"
          
          echo "🎯 Stage 3: Intelligent Knowledge Graph Builder"
          python main.py intelligent-graph --source-id "$SOURCE_ID"
          
          echo "✅ Full pipeline completed successfully!"
          
        else
          echo "🔄 Running Single Stage: $PIPELINE_STAGE"
          python main.py "$PIPELINE_STAGE" --source-id "$SOURCE_ID"
          echo "✅ Stage completed successfully!"
        fi
        
    - name: 📊 Generate Analysis Report
      if: always()
      run: |
        echo "## 📊 Kritis 4.0 Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "- **Source ID**: ${{ github.event.inputs.source_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pipeline Stage**: ${{ github.event.inputs.pipeline_stage }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Execution Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Result**: Analysis completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Result**: Analysis failed - check logs for details" >> $GITHUB_STEP_SUMMARY
        fi